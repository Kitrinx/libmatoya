// Copyright (c) 2020 Christopher D. Dickson <cdd@matoya.group>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

struct VS_OUTPUT {
	float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD;
};

cbuffer VS_CONSTANT_BUFFER : register(b0) {
	float width;
	float height;
	float constrain_h;
	uint filter;
	uint effect;
	uint format;
	uint __pad[2];
};

SamplerState ss {
};

Texture2D tex0 : register(t0);
Texture2D tex1 : register(t1);
Texture2D tex2 : register(t2);

float4 yuv_to_rgba(float y, float u, float v)
{
	y = (y - 0.0625) * 1.164;
	u = u - 0.5;
	v = v - 0.5;

	float r = y + 1.793 * v;
	float g = y - 0.213 * u - 0.533 * v;
	float b = y + 2.112 * u;

	return float4(r, g, b, 1.0);
}

float4 main(VS_OUTPUT input) : SV_TARGET
{
	float4 rgba;

	// NV12
	if (format == 2) {
		float y = tex0.Sample(ss, input.texcoord).r;
		float u = tex1.Sample(ss, input.texcoord).r;
		float v = tex1.Sample(ss, input.texcoord).g;

		return yuv_to_rgba(y, u, v);

	// I420 or I444
	} else if (format == 3 || format == 4) {
		float y = tex0.Sample(ss, input.texcoord).r;
		float u = tex1.Sample(ss, input.texcoord).r;
		float v = tex2.Sample(ss, input.texcoord).r;

		return yuv_to_rgba(y, u, v);
	}

	// RGBA + filter + effects

	// Gaussian Sharp
	if (filter == 3 || filter == 4) {
		float2 res = float2(width, height);
		float2 p = input.texcoord * res;
		float2 c = floor(p) + 0.5;
		float2 dist = p - c;
		if (filter == 3) {
			dist = 16.0 * dist * dist * dist * dist * dist;
		} else {
			dist = 4.0 * dist * dist * dist;
		}
		p = c + dist;

		rgba = tex0.Sample(ss, p / res);

	// No filter
	} else {
		rgba = tex0.Sample(ss, input.texcoord);
	}

	// Scanlines
	if (effect == 1 || effect == 2) {
		float n = (effect == 1) ? 1.0 : 2.0;
		float cycle = fmod(floor(input.texcoord.y * constrain_h), n * 2.0);

		if (cycle < n) {
			float2 res = float2(width, height);
			float2 p = input.texcoord * res;

			p.y -= 1.0;
			float4 top = tex0.Sample(ss, p / res);
			p.y += 2.0;
			float4 bot = tex0.Sample(ss, p / res);

			rgba = float4(
				((top.r + bot.r) / 2.0 + rgba.r * 4.0) / 5.0,
				((top.g + bot.g) / 2.0 + rgba.g * 4.0) / 5.0,
				((top.b + bot.g) / 2.0 + rgba.b * 4.0) / 5.0,
				((top.a + bot.a) / 2.0 + rgba.a * 4.0) / 5.0) * 0.80;
		}
	}

	return float4(rgba.b, rgba.g, rgba.r, rgba.a);
}
